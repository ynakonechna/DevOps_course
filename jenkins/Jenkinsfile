pipeline {
    agent any

     parameters {
        choice(name: 'choice', choices: ['','deploy','destroy'], description: 'choose a value')
    }

    stages {
        stage('Deploy') {
            when {
                expression {
                    params.choice == 'deploy'
                }
            }
            steps { 
                script {
                 withAWS(role:"jenkins", roleSessionName: "role", useNode: true){
                    INSTANCE_ID   = sh(script: """aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=demo-server" --query "Reservations[].Instances[].InstanceId" --output text""", returnStdout: true).trim()
                    if (INSTANCE_ID != '') {
                        sh """
                    aws ec2 run-instances \
    --image-id ami-08766f81ab52792ce \
    --count 1 \
    --instance-type t3.micro \
    --key-name j_key \
    --security-group-ids sg-05e0eaab7ba23bf57 \
    --subnet-id subnet-071874fe08c34005a \
    --block-device-mappings '[{\"DeviceName\":\"/dev/sdf\",\"Ebs\":{\"VolumeSize\":30,\"DeleteOnTermination\":true}}]' \
    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=demo-server}]' 'ResourceType=volume,Tags=[{Key=Name,Value=demo-server-disk}]'
                    """
                    }
                    
                }
                }
               
            }
        }
        
        stage('Destroy') {
            when {
                expression {
                    params.choice =='destroy'
                }
            }
            steps {
                script {
                    withAWS(role:"jenkins", roleSessionName: "role", useNode: true){
                        INSTANCE_ID   = sh(script: """aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=demo-server" --query "Reservations[].Instances[].InstanceId" --output text""", returnStdout: true).trim()
                        echo INSTANCE_ID
                    }
                    
                }
            }
        }
    }
}
